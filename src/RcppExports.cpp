// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// minimax_alt
Rcpp::List minimax_alt(int design_type, Rcpp::List& pso_info, Rcpp::List& design_info_list, Rcpp::List& init_bound_info, Rcpp::List& nelder_mead_settings, int n_threads, bool verbose, int seed);
RcppExport SEXP _minimaxALT_minimax_alt(SEXP design_typeSEXP, SEXP pso_infoSEXP, SEXP design_info_listSEXP, SEXP init_bound_infoSEXP, SEXP nelder_mead_settingsSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type design_type(design_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type pso_info(pso_infoSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type design_info_list(design_info_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type init_bound_info(init_bound_infoSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type nelder_mead_settings(nelder_mead_settingsSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(minimax_alt(design_type, pso_info, design_info_list, init_bound_info, nelder_mead_settings, n_threads, verbose, seed));
    return rcpp_result_gen;
END_RCPP
}
// transform_proportion
Rcpp::NumericVector transform_proportion(Rcpp::NumericVector& dirichlet_prop);
RcppExport SEXP _minimaxALT_transform_proportion(SEXP dirichlet_propSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type dirichlet_prop(dirichlet_propSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_proportion(dirichlet_prop));
    return rcpp_result_gen;
END_RCPP
}
// transform_sigmoid
Rcpp::NumericVector transform_sigmoid(Rcpp::NumericVector& inbound_sigmoid, Rcpp::NumericVector& lower_bound, Rcpp::NumericVector& upper_bound);
RcppExport SEXP _minimaxALT_transform_sigmoid(SEXP inbound_sigmoidSEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type inbound_sigmoid(inbound_sigmoidSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type upper_bound(upper_boundSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_sigmoid(inbound_sigmoid, lower_bound, upper_bound));
    return rcpp_result_gen;
END_RCPP
}
// equivalence_theorem
Rcpp::List equivalence_theorem(Rcpp::NumericVector& alloc, Rcpp::List& design_info_list, Rcpp::NumericMatrix& model_set_in, int seed);
RcppExport SEXP _minimaxALT_equivalence_theorem(SEXP allocSEXP, SEXP design_info_listSEXP, SEXP model_set_inSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type alloc(allocSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type design_info_list(design_info_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type model_set_in(model_set_inSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(equivalence_theorem(alloc, design_info_list, model_set_in, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_minimaxALT_minimax_alt", (DL_FUNC) &_minimaxALT_minimax_alt, 8},
    {"_minimaxALT_transform_proportion", (DL_FUNC) &_minimaxALT_transform_proportion, 1},
    {"_minimaxALT_transform_sigmoid", (DL_FUNC) &_minimaxALT_transform_sigmoid, 3},
    {"_minimaxALT_equivalence_theorem", (DL_FUNC) &_minimaxALT_equivalence_theorem, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_minimaxALT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
